version: '3.9'

# Production Docker Compose with advanced optimizations
# Features: Resource limits, health checks, logging, monitoring

services:
  # Astra Landing Page Application
  astra-landing:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        BUILDKIT_INLINE_CACHE: 1
      cache_from:
        - astra-landing:latest
    image: astra-landing:${VERSION:-latest}
    container_name: astra-landing-prod
    restart: unless-stopped

    # Port mapping
    ports:
      - "3000:3000"

    # Environment variables
    environment:
      # Site Configuration
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://astra.ai}
      - NEXT_PUBLIC_SITE_NAME=${NEXT_PUBLIC_SITE_NAME:-Astra}
      - NEXT_PUBLIC_CONTACT_EMAIL=${NEXT_PUBLIC_CONTACT_EMAIL}

      # Email Service (Resend)
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM_EMAIL=${RESEND_FROM_EMAIL}

      # Analytics (Optional)
      - NEXT_PUBLIC_GA_ID=${NEXT_PUBLIC_GA_ID}
      - NEXT_PUBLIC_PLAUSIBLE_DOMAIN=${NEXT_PUBLIC_PLAUSIBLE_DOMAIN}

      # Production settings
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1

    # Load environment from file
    env_file:
      - .env.local

    # Resource limits (optimized for landing page)
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Max 1 CPU core
          memory: 512M         # Max 512MB RAM
        reservations:
          cpus: '0.25'         # Min 0.25 CPU cores
          memory: 128M         # Min 128MB RAM

      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=astra-landing,environment=production"

    # Networks
    networks:
      - astra-network

    # Labels for monitoring and management
    labels:
      - "com.astra.service=landing-page"
      - "com.astra.environment=production"
      - "com.astra.version=${VERSION:-latest}"
      - "traefik.enable=true"
      - "traefik.http.routers.astra.rule=Host(`astra.ai`)"
      - "traefik.http.services.astra.loadbalancer.server.port=3000"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: astra-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx

    depends_on:
      astra-landing:
        condition: service_healthy

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

    networks:
      - astra-network

    labels:
      - "com.astra.service=reverse-proxy"
      - "com.astra.environment=production"

# Networks
networks:
  astra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# Volumes
volumes:
  nginx-cache:
    driver: local
